import{aa as V,af as s,ag as p,aK as D,ab as E,aQ as I,c as g,aF as N,ah as C,ai as y,aR as F,aS as K,aB as h,am as R,w as L,D as T,aE as z,aT as H,o as f,aL as O}from"./CnKDfatP.js";const P=["autocomplete","maxlength"],Q={class:"input-label-inner"},U={key:0,class:"input-label-required"},A=V({__name:"Input",props:{name:{type:String,default:"field",required:!0},type:{type:String,default:"text"},label:{type:String,default:""},placeholder:{type:String,default:""},modelValue:{type:String,default:"",required:!0},autocomplete:{type:Boolean,default:!1},pattern:{type:String},patternMismatchMessage:{type:String,default:"入力形式が正しくありません。"},maxlength:{type:[Number,String]},limitlength:{type:[Number,String]},required:{type:Boolean,default:!1},focus:{type:Boolean,default:!1},readonly:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},noSpin:{type:Boolean,default:!1},validation:{type:String,default:"blur",validator:a=>["always","blur"].includes(a)}},emits:{"update:modelValue":a=>!0,"enter-key-down":()=>!0,valid:()=>!0,invalid:a=>!0,focus:()=>!0,blur:()=>!0},setup(a,{emit:b}){const{noOnlySpace:x}=H(),e=a,u=b,i=s("idle"),S=s(null),d=s(e.focus),m=s(!1),v=`input-${e.name}`,r=s(""),B=p(()=>({[`_${i.value}`]:!0,_focus:d.value,_input:l.value.length,_readonly:e.readonly,_noLabel:!e.label,_disabled:e.disabled,_noSpin:e.noSpin})),l=p({get:()=>e.modelValue,set:t=>{u("update:modelValue",t)}});D(()=>e.modelValue,()=>{(e.validation==="always"||r.value)&&o()});const w=()=>{},$=()=>{},q=()=>{d.value=!0,u("focus")},M=()=>{e.validation==="blur"&&o(),d.value=!1,u("blur")},o=()=>{let t="";l.value===""&&e.required&&(t=`${e.label?`${e.label}を`:`${e.placeholder}を`}入力してください。`),!t&&e.maxlength&&l.value.length>Number.parseInt(String(e.maxlength))&&(t=`${e.maxlength}文字以内で入力してください。現在${l.value.length}文字です。`),!t&&l.value!==""&&l.value.match(x)&&(t="空白のみの入力はできません。"),!t&&e.pattern&&!new RegExp(e.pattern).test(l.value)&&(t=e.patternMismatchMessage),l.value===""&&!e.required&&(t=""),t?(i.value="invalid",u("invalid",t),r.value=t):(i.value="valid",u("valid"),r.value="")};return E(async()=>{await I(),l.value&&o()}),(t,n)=>{const k=K("focus");return f(),g("div",{class:z(["input",B.value])},[N(h("input",R({id:v,ref_key:"fieldEl",ref:S,"onUpdate:modelValue":n[0]||(n[0]=c=>l.value=c),class:"input-field"},{type:a.type,name:a.name,placeholder:a.placeholder,required:a.required,readonly:a.readonly,disabled:a.disabled,autocomplete:a.autocomplete,pattern:a.pattern,maxlength:a.maxlength},{autocomplete:a.autocomplete?"on":"off",maxlength:a.limitlength,onInput:w,onKeydown:$,onFocus:q,onBlur:M,onMouseover:n[1]||(n[1]=c=>m.value=!0),onMouseleave:n[2]||(n[2]=c=>m.value=!1)}),null,16,P),[[F,l.value],[k,a.focus]]),a.label?(f(),C(T,{key:0,tag:"label",for:v,class:"input-label"},{default:L(()=>[h("span",Q,O(a.label),1),a.required?(f(),g("span",U,"*")):y("",!0)]),_:1})):y("",!0)],2)}}});export{A as _};
